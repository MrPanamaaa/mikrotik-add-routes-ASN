#!/usr/bin/env python3
import sys
import argparse
import subprocess
import json
import ipaddress
import tempfile
import os
import re
from typing import List, Set


def check_dependencies():
    required = ['curl', 'ssh', 'scp']
    missing = []
    for cmd in required:
        if subprocess.run(['which', cmd], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode != 0:
            missing.append(cmd)
    if missing:
        print(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {' '.join(missing)}", file=sys.stderr)
        sys.exit(1)


def is_valid_ipv4(ip: str) -> bool:
    if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip):
        return False
    octets = ip.split('.')
    for octet in octets:
        if re.match(r'^0\d+$', octet):
            return False
        try:
            o = int(octet)
            if o < 0 or o > 255:
                return False
        except ValueError:
            return False
    return True


def is_valid_interface_name(name: str) -> bool:
    return bool(re.match(r'^[a-zA-Z0-9_.-]+$', name))


def normalize_asn(asn_input: str) -> str:
    asn = asn_input.strip()
    if asn.upper().startswith('AS'):
        rest = asn[2:]
        if rest.isdigit() and rest != '':
            return f"AS{rest}"
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AS (–æ–∂–∏–¥–∞–µ—Ç—Å—è AS123 –∏–ª–∏ 123).")
    else:
        if asn.isdigit():
            return f"AS{asn}"
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AS (–æ–∂–∏–¥–∞–µ—Ç—Å—è AS123 –∏–ª–∏ 123).")


def get_prefixes(asn: str) -> List[str]:
    url = f"https://stat.ripe.net/data/announced-prefixes/data.json?resource={asn}"
    try:
        result = subprocess.run(
            ['curl', '-sS', url],
            capture_output=True,
            text=True,
            check=True
        )
        data = json.loads(result.stdout)
        prefixes = []
        for item in data.get('data', {}).get('prefixes', []):
            prefix = item.get('prefix', '')
            if '.' in prefix and ':' not in prefix:
                prefixes.append(prefix)
        return prefixes
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ curl: {e}", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ JSON: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ prefixes: {e}", file=sys.stderr)
        sys.exit(1)


def aggregate_prefixes_stdin() -> List[str]:
    if sys.stdin.isatty():
        print("–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è aggregate-prefixes –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ pipe.", file=sys.stderr)
        print("–ü—Ä–∏–º–µ—Ä: echo '192.0.2.0/24' | python3 prefixes.py aggregate-prefixes", file=sys.stderr)
        sys.exit(1)

    try:
        lines = sys.stdin.read().splitlines()
        nets = []
        for line in lines:
            stripped = line.strip()
            if stripped and not stripped.startswith('#'):
                try:
                    net = ipaddress.IPv4Network(stripped, strict=False)
                    nets.append(net)
                except (ValueError, ipaddress.NetmaskValueError):
                    continue

        if not nets:
            return []

        collapsed = ipaddress.collapse_addresses(nets)
        return [str(net) for net in collapsed]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ aggregate-prefixes: {e}", file=sys.stderr)
        sys.exit(1)


def aggregate_prefixes_list(prefixes: List[str]) -> List[str]:
    try:
        nets = []
        for p in prefixes:
            try:
                nets.append(ipaddress.IPv4Network(p, strict=False))
            except Exception:
                continue
        if not nets:
            return []
        collapsed = ipaddress.collapse_addresses(nets)
        return [str(net) for net in collapsed]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}", file=sys.stderr)
        sys.exit(1)


def escape_mikrotik_comment(comment: str) -> str:
    cleaned = ''.join(c for c in comment if 32 <= ord(c) <= 126 or c in '\t\n\r')
    cleaned = ' '.join(cleaned.splitlines())
    cleaned = cleaned.rstrip()
    cleaned = (cleaned
               .replace('\\', '\\\\')
               .replace('"', '\\"')
               .replace('$', '\\$')
               .replace('`', '\\`')
               .replace('{', '\\{')
               .replace('}', '\\}')
               .replace('[', '\\[')
               .replace(']', '\\]'))
    return cleaned


def validate_router_host(host: str) -> bool:
    if is_valid_ipv4(host):
        return True
    if re.match(r'^[a-zA-Z0-9.-]+$', host):
        return True
    return False


def parse_router_address(router_str: str) -> str:
    if '@' in router_str:
        parts = router_str.split('@', 1)
        if not parts[0] or not parts[1]:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USER@HOST")
        host = parts[1]
    else:
        host = router_str
    if not validate_router_host(host):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ '{router_str}'")
    return router_str


def get_existing_routes(router_str: str, comment: str, gateway: str) -> Set[str]:
    safe_comment = escape_mikrotik_comment(comment)
    cmd = [
        'ssh',
        '-o', 'ConnectTimeout=60',
        '-o', 'StrictHostKeyChecking=accept-new',
        router_str,
        f'/ip route print without-paging terse proplist=dst-address where comment="{safe_comment}" and gateway="{gateway}"'
    ]
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        if result.returncode != 0:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SSH –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {result.stderr.strip() or result.stdout.strip()}", file=sys.stderr)
            sys.exit(1)

        existing = set()
        for line in result.stdout.splitlines():
            line = line.rstrip('\r\n')
            if 'dst-address=' in line:
                parts = line.split()
                for part in parts:
                    if part.startswith('dst-address='):
                        raw_prefix = part[len('dst-address='):].strip()
                        if not raw_prefix:
                            continue
                        try:
                            net = ipaddress.IPv4Network(raw_prefix, strict=False)
                            existing.add(str(net))
                        except Exception:
                            continue
        return existing

    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä–æ—É—Ç–µ—Ä—É.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}", file=sys.stderr)
        sys.exit(1)


def upload_and_apply_script(router_str: str, script_content: str, remote_filename: str, count_new: int, count_removed: int):
    with tempfile.NamedTemporaryFile(mode='w', suffix='.rsc', delete=False) as tmp:
        tmp.write(script_content)
        tmp_path = tmp.name

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {count_new} –¥–æ–±–∞–≤–∏—Ç—å, {count_removed} —É–¥–∞–ª–∏—Ç—å...", file=sys.stderr)
        scp_cmd = [
            'scp',
            '-o', 'ConnectTimeout=10',
            '-o', 'StrictHostKeyChecking=accept-new',
            tmp_path,
            f"{router_str}:{remote_filename}"
        ]
        result = subprocess.run(scp_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.", file=sys.stderr)
            sys.exit(1)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        print("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ...", file=sys.stderr)
        ssh_cmd = [
            'ssh',
            '-o', 'ConnectTimeout=10',
            '-o', 'StrictHostKeyChecking=accept-new',
            router_str,
            f'import "{remote_filename}"'
        ]
        result = subprocess.run(ssh_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞: –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è.", file=sys.stderr)
            # –û—á–∏—Å—Ç–∫–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
            subprocess.run([
                'ssh', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=accept-new',
                router_str, f'file remove "{remote_filename}"'
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            sys.exit(1)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...", file=sys.stderr)
        subprocess.run([
            'ssh', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=accept-new',
            router_str, f'file remove "{remote_filename}"'
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.unlink(tmp_path)
        except:
            pass


def add_routes(router_str: str, asn_input: str, comment: str, gateway: str):
    if not gateway:
        print("–û—à–∏–±–∫–∞: —à–ª—é–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", file=sys.stderr)
        sys.exit(1)

    if not (is_valid_ipv4(gateway) or is_valid_interface_name(gateway)):
        print(f"–û—à–∏–±–∫–∞: —à–ª—é–∑ '{gateway}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º IPv4-–∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ –∏–º–µ–Ω–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, '-', '_').", file=sys.stderr)
        sys.exit(1)

    try:
        router_for_ssh = parse_router_address(router_str)
        asn = normalize_asn(asn_input)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)

    print("", file=sys.stderr)
    print(f"üîß –¶–µ–ª–µ–≤–æ–π —Ä–æ—É—Ç–µ—Ä: {router_str}", file=sys.stderr)
    print(f"üåç AS: {asn}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{comment}\"", file=sys.stderr)
    print(f"üö™ –®–ª—é–∑: {gateway}", file=sys.stderr)
    print("", file=sys.stderr)

    # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    print("üì° –ó–∞–ø—Ä–æ—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è {} —á–µ—Ä–µ–∑ RIPE Stat...".format(asn), file=sys.stderr)
    raw_prefixes = get_prefixes(asn)
    count_raw = len(raw_prefixes)
    if count_raw == 0:
        print(f"‚ÑπÔ∏è –î–ª—è AS {asn} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö IPv4-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)
        return
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {count_raw} IPv4-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –æ—Ç RIPE.", file=sys.stderr)

    # –≠—Ç–∞–ø 2: –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    print("üßÆ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤...", file=sys.stderr)
    aggregated = aggregate_prefixes_list(raw_prefixes)
    count_agg = len(aggregated)
    if count_agg == 0:
        print("‚ö†Ô∏è –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", file=sys.stderr)
        return
    print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ: {count_raw} ‚Üí {count_agg} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)

    # –≠—Ç–∞–ø 3: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    print("üîç –ó–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å comment=\"{}\" –∏ gateway=\"{}\"... (–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –¥–ª–∏—Ç—å—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç!)".format(comment, gateway), file=sys.stderr)
    existing_set = get_existing_routes(router_str, comment, gateway)
    unique_existing = len(existing_set)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {unique_existing} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º comment –∏ gateway.", file=sys.stderr)

    # –≠—Ç–∞–ø 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    new_set = set(aggregated)
    to_remove = existing_set - new_set
    to_add = new_set - existing_set
    duplicates = existing_set & new_set

    count_new = len(to_add)
    count_removed = len(to_remove)
    count_dup = len(duplicates)

    if count_new == 0 and count_removed == 0:
        print("‚ÑπÔ∏è –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ù–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å.", file=sys.stderr)
        print("üìä –°–≤–æ–¥–∫–∞:", file=sys.stderr)
        print(f"   ‚Ä¢ –û—Ç RIPE:         {count_raw}", file=sys.stderr)
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {count_agg}", file=sys.stderr)
        print(f"   ‚Ä¢ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:  {count_dup}", file=sys.stderr)
        return

    # –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    safe_comment = escape_mikrotik_comment(comment)
    as_num = asn[2:] if asn.startswith('AS') else asn
    remote_filename = f"AS{as_num}.rsc"

    script_lines = [
        f"# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è AS {asn} | {subprocess.run(['date', '-Iseconds'], capture_output=True, text=True).stdout.strip()}",
        f"# –®–ª—é–∑: {gateway} | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}",
        "",
        f':local cmt "{safe_comment}"',
        f':local gw "{gateway}"',
        ""
    ]

    for prefix in sorted(to_remove):
        script_lines.append(f'/ip route remove [find where comment=$cmt and gateway=$gw and dst-address={prefix}]')

    if to_remove and to_add:
        script_lines.append("")

    for prefix in sorted(to_add):
        script_lines.append(f'/ip route add dst-address={prefix} gateway=$gw comment=$cmt')

    script_content = "\n".join(script_lines) + "\n"

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    upload_and_apply_script(router_str, script_content, remote_filename, count_new, count_removed)

    print("", file=sys.stderr)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è {asn}.", file=sys.stderr)
    print("üìä –°–≤–æ–¥–∫–∞:", file=sys.stderr)
    print(f"   ‚Ä¢ –û—Ç RIPE:               {count_raw}", file=sys.stderr)
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:       {count_agg}", file=sys.stderr)
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ: {unique_existing}", file=sys.stderr)
    print(f"       –∏–∑ –Ω–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:   {count_dup}", file=sys.stderr)
    print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ:               {count_removed}", file=sys.stderr)
    print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ:             {count_new}", file=sys.stderr)


def main():
    parser = argparse.ArgumentParser(
        prog='prefixes.py',
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ MikroTik –ø–æ –¥–∞–Ω–Ω—ã–º RIPE Stat."
    )
    subparsers = parser.add_subparsers(dest='command', required=True)

    p_prefixes = subparsers.add_parser('prefixes', help='–ü–æ–ª—É—á–∏—Ç—å IPv4-–ø—Ä–µ—Ñ–∏–∫—Å—ã AS')
    p_prefixes.add_argument('asn', help='–ù–æ–º–µ—Ä AS (–Ω–∞–ø—Ä–∏–º–µ—Ä, AS123 –∏–ª–∏ 123)')

    p_agg = subparsers.add_parser('aggregate-prefixes', help='–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–∑ stdin')

    p_agg_asn = subparsers.add_parser('aggregate-prefixes-asn', help='–ü–æ–ª—É—á–∏—Ç—å –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã AS')
    p_agg_asn.add_argument('asn', help='–ù–æ–º–µ—Ä AS')

    p_add = subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ MikroTik')
    p_add.add_argument('router', help='USER@IP_–†–û–£–¢–ï–†–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin@192.168.88.1)')
    p_add.add_argument('asn', help='–ù–æ–º–µ—Ä AS')
    p_add.add_argument('comment', help='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤')
    p_add.add_argument('gateway', help='–®–ª—é–∑ (IPv4 –∏–ª–∏ –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)')

    args = parser.parse_args()
    check_dependencies()

    if args.command == 'prefixes':
        try:
            asn = normalize_asn(args.asn)
            prefixes = get_prefixes(asn)
            for p in prefixes:
                print(p)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞: {e}", file=sys.stderr)
            sys.exit(1)

    elif args.command == 'aggregate-prefixes':
        aggregated = aggregate_prefixes_stdin()
        for p in aggregated:
            print(p)

    elif args.command == 'aggregate-prefixes-asn':
        try:
            asn = normalize_asn(args.asn)
            raw = get_prefixes(asn)
            if not raw:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¥–ª—è AS {asn} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö IPv4-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)
                return
            count_before = len(raw)
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {count_before} IPv4-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è AS {asn}", file=sys.stderr)
            aggregated = aggregate_prefixes_list(raw)
            if not aggregated:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è AS {asn}.", file=sys.stderr)
                return
            count_after = len(aggregated)
            print(f"–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è AS {asn}: {count_before} ‚Üí {count_after} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤", file=sys.stderr)
            for p in aggregated:
                print(p)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞: {e}", file=sys.stderr)
            sys.exit(1)

    elif args.command == 'add':
        add_routes(args.router, args.asn, args.comment, args.gateway)


if __name__ == '__main__':
    main()